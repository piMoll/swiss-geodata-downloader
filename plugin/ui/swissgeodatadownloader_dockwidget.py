# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SwissGeodataDownloaderDockWidget
                                 A QGIS plugin
 This plugin lets you comfortably download open geo data from sigstop.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Patricia Moll
        email                : pimoll.dev@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from PyQt5 import QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsPoint
from qgis.core import QgsTask, QgsApplication, QgsMessageLog, Qgis
from .swissgeodatadownloader_dockwidget_base import Ui_SwissGeodataDownloaderDockWidgetBase
from .ui_utilities import formatCoordinate, castToNum, filesizeFormatter, getDateFromIsoString
from ..core.api_datageoadmin import getDatasetList, getFileList, downloadFiles

EXTENT_SELECT_MODES = [
    'Entire dataset',
    'Draw Rectangle'
]

class SwissGeodataDownloaderDockWidget(QtWidgets.QDockWidget, Ui_SwissGeodataDownloaderDockWidgetBase):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(SwissGeodataDownloaderDockWidget, self).__init__(parent)
        self.setupUi(self)

        # Initialize variables
        self.datasetList = {}
        self.currentDataset = {}
        self.selectMode = None
        
        # Coordinate system
        self.projectRefSys = QgsCoordinateReferenceSystem('EPSG:2056')
        self.apiRefSys = QgsCoordinateReferenceSystem(f'EPSG:4326')
        self.transformProj2Api = QgsCoordinateTransform(
            self.projectRefSys, self.apiRefSys, QgsProject.instance())
        self.transformApi2Proj = QgsCoordinateTransform(
            self.apiRefSys, self.projectRefSys, QgsProject.instance())
        
        # Populate ui fields with data
        
        # Select mode drop down list
        for item in EXTENT_SELECT_MODES:
            self.guiSelectMode.addItem(item)
        self.guiSelectMode.setCurrentIndex(-1)
    
        # Deactivate unused ui-elements
        self.onUnselectDataset()
        
        # Load available datasets from api
        self.loadAvailableDatsets()
        
        # Connect signals
        self.guiDatasetList.currentItemChanged.connect(self.onDatasetSelected)
        self.guiFormat.currentTextChanged.connect(self.onOptionChanged)
        self.guiResolution.currentIndexChanged.connect(self.onOptionChanged)
        self.guiCoordsys.currentIndexChanged.connect(self.onOptionChanged)
        self.guiTimestamp.currentIndexChanged.connect(self.onOptionChanged)
        self.guiSelectMode.currentIndexChanged.connect(self.onSelectModeChanged)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
    
    def loadAvailableDatsets(self):
        """Call api to get a list of available datasets"""
        self.datasetList = getDatasetList()
        for dsId in self.datasetList.keys():
            self.guiDatasetList.addItem(dsId)
    
    def onDatasetSelected(self, item):
        """Set up ui according to the options of the newly selected dataset"""
        self.currentDataset = self.datasetList[item.text()]
        # Show dataset in search field
        self.guiSearchField.setText(self.currentDataset['id'])
        
        # Activate options and extent groups
        self.clearOptions()
        self.guiGroupOptions.setDisabled(False)
        self.guiGroupExtent.setDisabled(False)
        
        for optionKey, option in self.currentDataset['options'].items():
            if optionKey == 'format':
                self.guiFormat.addItems(option)
                self.guiFormatL.setDisabled(False)
                self.guiFormat.setDisabled(False)
            if optionKey == 'resolution':
                # Stringify resolution numbers
                optionStr = [str(r) for r in option]
                self.guiResolution.addItems(optionStr)
                self.guiResolutionL.setDisabled(False)
                self.guiResolution.setDisabled(False)
            if optionKey == 'coordsys':
                # Create a coordinate system object and get its friendly identifier
                coordSysList = [QgsCoordinateReferenceSystem(f'EPSG:{epsg}') for epsg in option]
                coordSysNames = [cs.userFriendlyIdentifier() for cs in coordSysList]
                self.guiCoordsys.addItems(coordSysNames)
                self.guiCoordsysL.setDisabled(False)
                self.guiCoordsys.setDisabled(False)
            if optionKey == 'timestamp':
                # Format ISO time string into nice dates
                optionStr = [getDateFromIsoString(ts) for ts in option]
                self.guiTimestamp.addItems(optionStr)
                self.guiTimestampL.setDisabled(False)
                self.guiTimestamp.setDisabled(False)
        
        self.updateSelectMode()
        
    def clearOptions(self):
        self.guiFormat.clear()
        self.guiFormat.setDisabled(True)
        self.guiFormatL.setDisabled(True)
        self.guiResolution.clear()
        self.guiResolution.setDisabled(True)
        self.guiResolutionL.setDisabled(True)
        self.guiCoordsys.clear()
        self.guiCoordsys.setDisabled(True)
        self.guiCoordsysL.setDisabled(True)
        self.guiTimestamp.clear()
        self.guiTimestamp.setDisabled(True)
        self.guiTimestampL.setDisabled(True)
    
    def clearExtent(self):
        self.guiExtentWest.clear()
        self.guiExtentEast.clear()
        self.guiExtentSouth.clear()
        self.guiExtentNorth.clear()
        
    def onUnselectDataset(self):
        self.currentDataset = {}
        self.clearOptions()
        # self.clearExtent()

        self.guiGroupExtent.setDisabled(True)
        self.guiGroupFiles.setDisabled(True)
        self.guiDownloadBtn.setDisabled(True)
    
    def onOptionChanged(self, newVal):
        self.loadFileList()
    
    def onSelectModeChanged(self, itemIdx):
        """When user selected an item from drop down list"""
        self.selectMode = itemIdx
        self.updateSelectMode()
    
    def updateSelectMode(self):
        """When select mode was programmatically or manually changed"""
        if self.selectMode == 0:
            self.setBbox(self.currentDataset['bbox'])
            self.loadFileList()
        elif self.selectMode == 1:
            # TODO remove
            self.setBbox([7.43,46.95,7.44,46.96])
            self.loadFileList()
    
    def setBbox(self, bbox):
        """Fill in coordinates of bounding box, transform coordinates if
        necessary"""
        llPoint = QgsPoint(bbox[0], bbox[1])
        urPoint = QgsPoint(bbox[2], bbox[3])
        llPoint.transform(self.transformApi2Proj)
        urPoint.transform(self.transformApi2Proj)
        self.guiExtentWest.setText(formatCoordinate(llPoint.x()))
        self.guiExtentSouth.setText(formatCoordinate(llPoint.y()))
        self.guiExtentEast.setText(formatCoordinate(urPoint.x()))
        self.guiExtentNorth.setText(formatCoordinate(urPoint.y()))
    
    def getBbox(self):
        """Read out coordinates of bounding box, transform coordinates if
        necessary"""
        llPoint = QgsPoint(castToNum(self.guiExtentWest.text()),
                           castToNum(self.guiExtentSouth.text()))
        urPoint = QgsPoint(castToNum(self.guiExtentEast.text()),
                           castToNum(self.guiExtentNorth.text()))
        llPoint.transform(self.transformProj2Api)
        urPoint.transform(self.transformProj2Api)
        return [llPoint.x(),
                llPoint.y(),
                urPoint.x(),
                urPoint.y()]

    def loadFileList(self):
        """Collect options and call api to retrieve list of items"""
        # Read out extent
        bbox = self.getBbox()
        if not bbox or float('inf') in bbox:
            self.guiGroupFiles.setDisabled(True)
            self.guiDownloadBtn.setDisabled(True)
            return
        # Read out options
        options = {}
        timestamp = ''
        for optionKey, option in self.currentDataset['options'].items():
            if optionKey == 'format':
                options[optionKey] = option[self.guiFormat.currentIndex()]
            if optionKey == 'resolution':
                options[optionKey] = option[self.guiResolution.currentIndex()]
            if optionKey == 'coordsys':
                options[optionKey] = option[self.guiCoordsys.currentIndex()]
            if optionKey == 'timestamp':
                timestamp = option[self.guiTimestamp.currentIndex()]
        
        # Call api
        fileList, metadata = getFileList(self.currentDataset, bbox, timestamp, options)
        # Activate ui group containers that display the file list and download
        #  button
        self.guiGroupFiles.setDisabled(False)
        self.guiDownloadBtn.setDisabled(False)
        self.guiFileListStatus.setText(
            f"{metadata['count']} File(s) with a "
            f"total size of {filesizeFormatter(metadata['size'])} are ready to be downloaded.")

        # task = QgsTask.fromFunction('heavy function', getFileList,
        #                             on_finished=self.displayFileList,
        #                             dataset=self.currentDataset, bbox=bbox,
        #                             options=options)
        # QgsApplication.taskManager().addTask(task)

    # def displayFileList(self, exception, files=None):
    #     if not exception:
    #         self.guiGroupFiles.setDisabled(False)
    #         self.guiDownloadBtn.setDisabled(False)
    #         self.guiFileListStatus.setText(f"{files['metadata']['count']} File(s) with a "
    #             f"total size of {files['metadata']['size']} MB are ready to be download.")
    #     else:
    #         QgsMessageLog.logMessage(f"Exception: {exception}",
    #                                  'MESSAGE_CATEGORY', Qgis.Critical)
    #         raise exception
